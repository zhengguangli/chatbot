# 聊天机器人项目结构指南

## 项目概览
这是一个基于OpenAI GPT的智能聊天机器人项目，支持Web和CLI双界面运行。

## 核心文件结构

### 主入口点
- [main.py](mdc:main.py) - 主程序入口，智能检测并启动Web或CLI界面
- [cli.py](mdc:cli.py) - CLI模式的备用入口点

### 源代码组织 (src/)
- [src/__init__.py](mdc:src/__init__.py) - 模块初始化，导出主要接口
- [src/config/](mdc:src/config/) - 配置管理模块
  - [src/config/environment.py](mdc:src/config/environment.py) - 环境变量处理
  - [src/config/settings.py](mdc:src/config/settings.py) - 应用设置配置
- [src/core/](mdc:src/core/) - 核心业务逻辑
  - [src/core/chatbot.py](mdc:src/core/chatbot.py) - 聊天机器人核心逻辑
  - [src/core/client.py](mdc:src/core/client.py) - OpenAI API客户端
- [src/ui/](mdc:src/ui/) - 用户界面层
  - [src/ui/streamlit_app.py](mdc:src/ui/streamlit_app.py) - Streamlit Web界面
  - [src/ui/cli_app.py](mdc:src/ui/cli_app.py) - 命令行界面
- [src/utils/](mdc:src/utils/) - 工具函数
  - [src/utils/errors.py](mdc:src/utils/errors.py) - 错误处理工具
  - [src/utils/messages.py](mdc:src/utils/messages.py) - 消息处理工具

### Memory Bank系统 (memory-bank/)
- [memory-bank/projectbrief.md](mdc:memory-bank/projectbrief.md) - 项目简介
- [memory-bank/productContext.md](mdc:memory-bank/productContext.md) - 产品上下文
- [memory-bank/techContext.md](mdc:memory-bank/techContext.md) - 技术上下文
- [memory-bank/systemPatterns.md](mdc:memory-bank/systemPatterns.md) - 系统架构模式
- [memory-bank/activeContext.md](mdc:memory-bank/activeContext.md) - 当前活动上下文
- [memory-bank/progress.md](mdc:memory-bank/progress.md) - 项目进度
- [memory-bank/tasks.md](mdc:memory-bank/tasks.md) - 任务跟踪
- [memory-bank/style-guide.md](mdc:memory-bank/style-guide.md) - 代码风格指南

### 配置文件
- [pyproject.toml](mdc:pyproject.toml) - Python项目配置和依赖管理
- [uv.lock](mdc:uv.lock) - UV包管理器的锁定文件
- [Makefile](mdc:Makefile) - 项目构建和管理命令

### 开发模式指令 (custom_modes/)
- [custom_modes/van_instructions.md](mdc:custom_modes/van_instructions.md) - VAN模式指令
- [custom_modes/plan_instructions.md](mdc:custom_modes/plan_instructions.md) - PLAN模式指令
- [custom_modes/creative_instructions.md](mdc:custom_modes/creative_instructions.md) - CREATIVE模式指令
- [custom_modes/implement_instructions.md](mdc:custom_modes/implement_instructions.md) - IMPLEMENT模式指令
- [custom_modes/reflect_archive_instructions.md](mdc:custom_modes/reflect_archive_instructions.md) - REFLECT+ARCHIVE模式指令

## 架构模式
项目采用分层架构：
1. **配置层** - 环境变量和设置管理
2. **核心层** - 聊天机器人业务逻辑
3. **界面层** - Web和CLI用户界面
4. **工具层** - 错误处理和消息管理

## 开发工作流
1. 使用Memory Bank系统进行项目管理
2. 遵循VAN → PLAN → CREATIVE → IMPLEMENT → REFLECT+ARCHIVE的开发模式
3. 使用UV进行依赖管理
4. 使用Black进行代码格式化
