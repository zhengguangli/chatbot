---
description:
globs:
alwaysApply: false
---
# OpenAI聊天机器人开发指南

## 核心实现说明
本项目基于 [main.py](mdc:main.py) 实现了一个完整的OpenAI聊天机器人，支持Web和命令行双界面。

## OpenAI API集成

### 客户端初始化
- 使用 `initialize_openai_client()` 函数初始化OpenAI客户端
- 从环境变量 `OPENAI_API_KEY` 获取API密钥
- 包含错误处理和用户提示

### API调用配置
- 默认模型：`qwen3`
- 最大令牌数：1000
- 温度参数：0.7（平衡创造性和一致性）
- 系统提示：友好的中文助手角色

### 会话管理
- 维护对话历史上下文
- 限制历史长度（最多20条消息）
- 支持连续对话

## Streamlit Web界面

### 界面功能
- 聊天历史显示
- 实时消息输入
- 思考状态指示器
- 会话状态管理

### 状态管理
- 使用 `st.session_state.conversation_history` 保存对话
- 自动滚动和消息展示
- 错误处理和用户反馈

## 命令行界面

### 备用模式
- 当Streamlit不可用时自动启用
- 简单的输入输出循环
- 支持退出命令（quit/exit/退出）

### 使用方式
```bash
# 直接运行获得命令行界面
uv run python main.py

# 启动Web界面
uv run streamlit run main.py
```

## 环境配置

### 必需环境变量
- `OPENAI_API_KEY` - OpenAI API密钥

### 可选环境变量
- `OPENAI_API_BASE` - 自定义API基础URL
- `OPENAI_MODEL` - 指定使用的模型

### 代理配置
如需使用代理，设置以下环境变量：
```bash
export https_proxy=http://127.0.0.1:7897
export http_proxy=http://127.0.0.1:7897
export all_proxy=socks5://127.0.0.1:7897
```

## 错误处理策略

### API错误处理
- 网络超时处理
- API配额限制处理
- 无效密钥检测
- 友好的中文错误消息

### 用户输入处理
- 空输入过滤
- 特殊命令识别
- 输入长度限制

## 扩展开发建议

### 添加新功能
1. 在 [main.py](mdc:main.py) 中添加新函数
2. 保持函数单一职责原则
3. 添加适当的错误处理
4. 更新文档注释

### 模型优化
- 调整温度参数以改变响应风格
- 修改系统提示以定制AI行为
- 实验不同的模型（gpt-4, qwen3等）

### 界面增强
- 添加更多Streamlit组件
- 实现对话导出功能
- 添加用户设置面板
- 集成语音输入/输出

## 部署注意事项
- 确保API密钥安全存储
- 配置适当的资源限制
- 监控API使用情况和成本
- 实现日志记录（可选）
