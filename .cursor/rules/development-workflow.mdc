# 开发工作流程指南

## 包管理系统
项目使用 **UV** 作为现代Python包管理器，提供快速依赖解析和环境管理。

### 核心配置文件
- [pyproject.toml](mdc:pyproject.toml) - 项目配置、依赖定义和工具配置
- [uv.lock](mdc:uv.lock) - 锁定的依赖版本文件
- [.env](mdc:.env) - 环境变量配置（需手动创建）

### 依赖管理
```bash
# 安装所有依赖
uv sync

# 安装包括开发依赖
uv sync --group dev

# 添加新依赖
uv add package_name

# 添加开发依赖
uv add --group dev package_name
```

## 开发工具集成

### Makefile快捷命令
[Makefile](mdc:Makefile) 提供了完整的开发工作流程：

#### 环境管理
- `make install` - 安装所有依赖
- `make dev` - 设置开发环境
- `make clean` - 清理缓存文件
- `make env` - 创建.env配置文件

#### 代码质量
- `make format` - 使用Black格式化代码
- `make check` - 检查代码格式
- `make test` - 运行pytest测试
- `make lint` - 完整的代码检查和测试

#### 应用运行
- `make run` / `make web` - 启动Web界面
- `make cli` - 启动CLI界面

### 代码格式化
使用 **Black** 进行代码格式化，配置在 [pyproject.toml](mdc:pyproject.toml) 中：
- 行长度：88字符
- 目标Python版本：3.9+
- 自动排除：`.git`, `.venv`, `build` 等目录

## 环境配置

### 必需配置
```bash
OPENAI_API_KEY=your_actual_api_key_here
```

### 可选配置
```bash
OPENAI_BASE_URI=https://api.openai.com/v1      # 自定义API端点
OPENAI_ORG_ID=your_organization_id              # 组织ID
OPENAI_PROJECT_ID=your_project_id               # 项目ID  
OPENAI_TIMEOUT=30                               # 超时时间
```

## Git工作流程

### 提交规范
遵循约定式提交格式：
```
<type>(<scope>): <subject>
```

#### 提交类型
- `feat` - 新功能
- `fix` - Bug修复  
- `docs` - 文档更新
- `style` - 代码格式化
- `refactor` - 重构代码
- `test` - 添加测试
- `chore` - 构建工具变动

#### 范围
- `ui` - 用户界面
- `core` - 核心功能
- `config` - 配置管理
- `utils` - 工具函数

### 示例
```bash
git commit -m "feat(ui): 添加对话导出功能"
git commit -m "fix(core): 修复API调用超时问题"
git commit -m "docs(readme): 更新安装说明"
```